--[[
    Script: Limit-Inspired Garden Hub
    Version: 6.1 (Bug Fixes & Polish)
    Author: Walvy
    Description: A comprehensive hub for "Grow a Garden". This version includes functional sliders,
                 more efficient ESP, and overall stability improvements.
]]

--================================================================--
-- Services
--================================================================--

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

--================================================================--
-- Main Hub Configuration
--================================================================--

local Hub = {
    Title = "Walvy's Garden Hub v6.1",
    Colors = {
        Background = Color3.fromRGB(21, 21, 21),
        Secondary = Color3.fromRGB(31, 31, 31),
        Primary = Color3.fromRGB(110, 80, 255),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180)
    },
    Font = Enum.Font.Gotham,
    Toggles = {
        AutoCollect = false,
        ESPEggs = false,
        ESPPlants = false,
    }
}

--================================================================--
-- Core GUI Framework
--================================================================--

local App = {}
App.__index = App

function App.new()
    local self = setmetatable({}, App)
    self.LocalPlayer = Players.LocalPlayer
    self.Character = self.LocalPlayer.Character or self.LocalPlayer.CharacterAdded:Wait()
    self.Humanoid = self.Character:WaitForChild("Humanoid")

    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "WalvyHub"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.DisplayOrder = 1000
    self.ScreenGui.Parent = self.LocalPlayer:WaitForChild("PlayerGui")

    self.Connections = {}
    self.ESPCache = { Egg = {}, Plant = {} }
    self.AutoCollectDebounce = {}

    self:_build()
    self:_startLoops()

    return self
end

function App:_build()
    -- ... (Main frame and tab structure is unchanged)
    local mainFrame = Instance.new("Frame"); mainFrame.Name = "MainFrame"; mainFrame.Size = UDim2.new(0, 580, 0, 380); mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.BackgroundColor3 = Hub.Colors.Background; mainFrame.BorderSizePixel = 0; mainFrame.Draggable = true; mainFrame.Active = true; mainFrame.Parent = self.ScreenGui; local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 6)
    local titleBar = Instance.new("Frame"); titleBar.Name = "TitleBar"; titleBar.Size = UDim2.new(1, 0, 0, 30); titleBar.BackgroundColor3 = Hub.Colors.Primary; titleBar.Parent = mainFrame; local titleCorner = Instance.new("UICorner", titleBar); titleCorner.CornerRadius = UDim.new(0, 6)
    local titleLabel = Instance.new("TextLabel"); titleLabel.Name = "TitleLabel"; titleLabel.Size = UDim2.new(1, -60, 1, 0); titleLabel.Text = Hub.Title; titleLabel.Font = Hub.Font; titleLabel.TextSize = 16; titleLabel.TextColor3 = Hub.Colors.Text; titleLabel.TextXAlignment = Enum.TextXAlignment.Left; titleLabel.Position = UDim2.new(0, 10, 0, 0); titleLabel.BackgroundTransparency = 1; titleLabel.Parent = titleBar
    local tabContainer = Instance.new("Frame"); tabContainer.Name = "TabContainer"; tabContainer.Size = UDim2.new(0, 120, 1, -30); tabContainer.Position = UDim2.new(0, 0, 0, 30); tabContainer.BackgroundColor3 = Hub.Colors.Secondary; tabContainer.Parent = mainFrame
    local tabLayout = Instance.new("UIListLayout", tabContainer); tabLayout.Padding = UDim.new(0, 5); tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    local contentContainer = Instance.new("Frame"); contentContainer.Name = "ContentContainer"; contentContainer.Size = UDim2.new(1, -120, 1, -30); contentContainer.Position = UDim2.new(0, 120, 0, 30); contentContainer.BackgroundTransparency = 1; contentContainer.Parent = mainFrame

    local tabs = { {Name = "Main"}, {Name = "Teleports"}, {Name = "Visuals"}, {Name = "Player"}, {Name = "Misc"} }
    local pages = {}
    for i, tabInfo in ipairs(tabs) do
        local page = Instance.new("Frame", contentContainer); page.Name = tabInfo.Name .. "Page"; page.Size = UDim2.new(1, 0, 1, 0); page.BackgroundTransparency = 1; page.Visible = (i == 1); pages[tabInfo.Name] = page
        local tabButton = Instance.new("TextButton", tabContainer); tabButton.Name = tabInfo.Name; tabButton.Text = "  " .. tabInfo.Name; tabButton.TextXAlignment = Enum.TextXAlignment.Left; tabButton.Size = UDim2.new(1, -10, 0, 35); tabButton.BackgroundColor3 = Hub.Colors.Secondary; tabButton.TextColor3 = (i==1) and Hub.Colors.Text or Hub.Colors.TextSecondary; tabButton.Font = Hub.Font; tabButton.TextSize = 15; tabButton.LayoutOrder = i
        tabButton.MouseButton1Click:Connect(function() for name, p in pairs(pages) do p.Visible = (name == tabInfo.Name) end; for _, btn in ipairs(tabContainer:GetChildren()) do if btn:IsA("TextButton") then btn.TextColor3 = (btn.Name == tabInfo.Name) and Hub.Colors.Text or Hub.Colors.TextSecondary end end end)
    end

    self:_populateMain(pages.Main)
    self:_populateTeleports(pages.Teleports)
    self:_populateVisuals(pages.Visuals)
    self:_populatePlayer(pages.Player)
    self:_populateMisc(pages.Misc, mainFrame)
end

function App:_startLoops()
    local espUpdateRate = 0.2 -- seconds
    local lastEspUpdate = 0

    table.insert(self.Connections, RunService.RenderStepped:Connect(function(dt)
        lastEspUpdate = lastEspUpdate + dt
        if Hub.Toggles.AutoCollect then self:_doAutoCollect() end

        if lastEspUpdate >= espUpdateRate then
            if Hub.Toggles.ESPEggs then self:_updateESP("Egg") else self:_clearESP("Egg") end
            if Hub.Toggles.ESPPlants then self:_updateESP("Plant") else self:_clearESP("Plant") end
            lastEspUpdate = 0
        end
    end))
end

function App:_cleanup()
    for _, connection in ipairs(self.Connections) do
        connection:Disconnect()
    end
    self.ScreenGui:Destroy()
end

--================================================================--
-- Tab Population Functions
--================================================================--

function App:_populateMain(parent)
    self:_createToggle("Auto Collect Ripe", parent, UDim2.new(0, 20, 0, 20), function(value)
        Hub.Toggles.AutoCollect = value
    end)
end

function App:_populateTeleports(parent)
    -- ... (Unchanged)
    local function createTeleportButton(name, position) local button = Instance.new("TextButton", parent); button.Name = name; button.Text = "Teleport to " .. name; button.Size = UDim2.new(0, 150, 0, 35); button.Position = UDim2.new(0, 20, 0, 20 + (#parent:GetChildren() - 1) * 40); button.BackgroundColor3 = Hub.Colors.Primary; button.TextColor3 = Hub.Colors.Text; button.Font = Hub.Font; button.MouseButton1Click:Connect(function() if self.Character and self.Character:FindFirstChild("HumanoidRootPart") then self.Character.HumanoidRootPart.CFrame = position end end) end; if Workspace:FindFirstChild("Shop") then createTeleportButton("Shop", Workspace.Shop.PrimaryPart.CFrame) end; if Workspace:FindFirstChild("SellArea") then createTeleportButton("Sell Area", Workspace.SellArea.PrimaryPart.CFrame) end
end

function App:_populateVisuals(parent)
    self:_createToggle("ESP Eggs", parent, UDim2.new(0, 20, 0, 20), function(value)
        Hub.Toggles.ESPEggs = value
        if not value then self:_clearESP("Egg") end
    end)
    self:_createToggle("ESP Ripe Plants", parent, UDim2.new(0, 20, 0, 60), function(value)
        Hub.Toggles.ESPPlants = value
        if not value then self:_clearESP("Plant") end
    end)
end

function App:_populatePlayer(parent)
    if not self.Humanoid then return end

    self:_createSlider("WalkSpeed", 16, 50, self.Humanoid.WalkSpeed, parent, UDim2.new(0.05, 0, 0.1, 0), function(value)
        self.Humanoid.WalkSpeed = value
    end)
    self:_createSlider("JumpPower", 50, 150, self.Humanoid.JumpPower, parent, UDim2.new(0.05, 0, 0.3, 0), function(value)
        self.Humanoid.JumpPower = value
    end)
end

function App:_populateMisc(parent, mainFrame)
    self:_createButton("Toggle GUI", parent, UDim2.new(0.05, 0, 0.1, 0), function()
        mainFrame.Visible = not mainFrame.Visible
    end)
    self:_createButton("Destroy GUI", parent, UDim2.new(0.05, 0, 0.3, 0), function()
        self:_cleanup()
    end)
end

--================================================================--
-- Feature Implementation
--================================================================--

function App:_doAutoCollect()
    local plantFolder = Workspace:FindFirstChild("Plants")
    if not plantFolder then return end

    for _, plant in ipairs(plantFolder:GetChildren()) do
        if string.find(plant.Name, "Ripe") and not self.AutoCollectDebounce[plant] then
            local prompt = plant:FindFirstChildWhichIsA("ProximityPrompt")
            if prompt then
                self.AutoCollectDebounce[plant] = true
                prompt:InputHoldBegin()
                task.delay(2, function() -- Add debounce to prevent re-collecting the same plant too quickly
                    self.AutoCollectDebounce[plant] = nil
                end)
            end
        end
    end
end

function App:_updateESP(tag)
    local folder = Workspace:FindFirstChild(tag == "Egg" and "Eggs" or "Plants")
    if not folder then return end

    local currentItems = {}
    for _, item in ipairs(folder:GetChildren()) do
        if (tag == "Plant" and string.find(item.Name, "Ripe")) or tag == "Egg" then
            currentItems[item] = true
            if not self.ESPCache[tag][item] then -- Create ESP only if not already cached
                local esp = Instance.new("BoxHandleAdornment")
                esp.Name = "ESP_" .. tag
                esp.Adornee = item
                esp.Size = item:GetExtentsSize()
                esp.Color3 = (tag == "Egg") and Color3.fromRGB(255, 255, 0) or Color3.fromRGB(0, 255, 0)
                esp.AlwaysOnTop = true
                esp.Parent = self.ScreenGui
                self.ESPCache[tag][item] = esp
            end
        end
    end

    -- Clean up old ESPs for items that no longer exist
    for item, esp in pairs(self.ESPCache[tag]) do
        if not currentItems[item] or not item.Parent then
            esp:Destroy()
            self.ESPCache[tag][item] = nil
        end
    end
end

function App:_clearESP(tag)
    for _, esp in pairs(self.ESPCache[tag]) do
        esp:Destroy()
    end
    self.ESPCache[tag] = {}
end

--================================================================--
-- UI Element Constructors
--================================================================--

function App:_createToggle(text, parent, position, callback)
    -- ... (Unchanged)
    local toggleFrame = Instance.new("Frame", parent); toggleFrame.Position = position; toggleFrame.Size = UDim2.new(0, 150, 0, 30); toggleFrame.BackgroundTransparency = 1; local label = Instance.new("TextLabel", toggleFrame); label.Size = UDim2.new(1, -40, 1, 0); label.Text = text; label.Font = Hub.Font; label.TextColor3 = Hub.Colors.Text; label.TextXAlignment = Enum.TextXAlignment.Left; label.BackgroundTransparency = 1; local switch = Instance.new("TextButton", toggleFrame); switch.Size = UDim2.new(0, 30, 0, 15); switch.Position = UDim2.new(1, -30, 0.5, 0); switch.AnchorPoint = Vector2.new(0.5, 0.5); switch.BackgroundColor3 = Color3.fromRGB(80, 80, 80); local c = Instance.new("UICorner", switch); c.CornerRadius = UDim.new(1,0); local bg = Instance.new("Frame", switch); bg.Size=UDim2.new(0,11,0,11);bg.Position=UDim2.new(0,2,0.5,0);bg.AnchorPoint=Vector2.new(0,0.5);bg.BackgroundColor3=Color3.fromRGB(150,150,150);local c2=Instance.new("UICorner",bg);c2.CornerRadius=UDim.new(1,0); local toggled = false; switch.MouseButton1Click:Connect(function() toggled = not toggled; switch.BackgroundColor3 = toggled and Hub.Colors.Primary or Color3.fromRGB(80,80,80); TweenService:Create(bg, TweenInfo.new(0.2), {Position = toggled and UDim2.new(1,-2,0.5,0) or UDim2.new(0,2,0.5,0)}):Play(); callback(toggled) end)
end

function App:_createSlider(text, min, max, initial, parent, position, callback)
    local container = Instance.new("Frame", parent); container.Position = position; container.Size = UDim2.new(0.9, 0, 0, 60); container.BackgroundTransparency = 1
    local label = Instance.new("TextLabel", container); label.Size = UDim2.new(1,0,0,20); label.Font = Hub.Font; label.TextColor3 = Hub.Colors.Text; label.TextXAlignment = Enum.TextXAlignment.Left; label.BackgroundTransparency = 1

    local sliderBase = Instance.new("Frame", container); sliderBase.Name = "SliderBase"; sliderBase.Size = UDim2.new(1, 0, 0, 8); sliderBase.Position = UDim2.new(0, 0, 0, 25); sliderBase.BackgroundColor3 = Hub.Colors.Secondary; local c1=Instance.new("UICorner", sliderBase);c1.CornerRadius=UDim.new(0,4)
    local sliderFill = Instance.new("Frame", sliderBase); sliderFill.Name = "SliderFill"; sliderFill.BackgroundColor3 = Hub.Colors.Primary; local c2=Instance.new("UICorner", sliderFill);c2.CornerRadius=UDim.new(0,4)

    local function updateSlider(value)
        local percentage = (value - min) / (max - min)
        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
        label.Text = text .. ": " .. string.format("%.1f", value)
        callback(value)
    end

    updateSlider(initial)

    local dragger = Instance.new("TextButton", sliderBase); dragger.Size = UDim2.new(1,0,3,0); dragger.Position = UDim2.new(0,0,-1,0); dragger.BackgroundTransparency = 1; dragger.Text = ""
    local dragging = false
    dragger.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end
    end)
    dragger.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)

    local function onDrag(input)
        if dragging then
            local pos = input.Position.X - sliderBase.AbsolutePosition.X
            local percentage = math.clamp(pos / sliderBase.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percentage
            updateSlider(value)
        end
    end

    dragger.InputChanged:Connect(function(input) onDrag(input) end)
    dragger.MouseButton1Down:Connect(function() onDrag(UserInputService:GetMouseLocation()) end)
end

function App:_createButton(text, parent, position, callback)
    -- ... (Unchanged)
    local button = Instance.new("TextButton", parent); button.Position = position; button.Size = UDim2.new(0.4,0,0,35); button.Text = text; button.Font=Hub.Font; button.BackgroundColor3=Hub.Colors.Primary; button.TextColor3=Hub.Colors.Text; button.MouseButton1Click:Connect(callback)
end

--================================================================--
-- Script Entry Point
--================================================================--

pcall(function()
    App.new()
end)
